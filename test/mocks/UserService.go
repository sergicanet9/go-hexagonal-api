// Code generated by mockery v2.53.5. DO NOT EDIT.

package mocks

import (
	context "context"

	models "github.com/sergicanet9/go-hexagonal-api/core/models"
	mock "github.com/stretchr/testify/mock"
)

// UserService is an autogenerated mock type for the UserService type
type UserService struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, user
func (_m *UserService) Create(ctx context.Context, user models.CreateUserReq) (models.CreateUserResp, error) {
	ret := _m.Called(ctx, user)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 models.CreateUserResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.CreateUserReq) (models.CreateUserResp, error)); ok {
		return rf(ctx, user)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.CreateUserReq) models.CreateUserResp); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Get(0).(models.CreateUserResp)
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.CreateUserReq) error); ok {
		r1 = rf(ctx, user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateMany provides a mock function with given fields: ctx, users
func (_m *UserService) CreateMany(ctx context.Context, users []models.CreateUserReq) (models.CreateManyUserResp, error) {
	ret := _m.Called(ctx, users)

	if len(ret) == 0 {
		panic("no return value specified for CreateMany")
	}

	var r0 models.CreateManyUserResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []models.CreateUserReq) (models.CreateManyUserResp, error)); ok {
		return rf(ctx, users)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []models.CreateUserReq) models.CreateManyUserResp); ok {
		r0 = rf(ctx, users)
	} else {
		r0 = ret.Get(0).(models.CreateManyUserResp)
	}

	if rf, ok := ret.Get(1).(func(context.Context, []models.CreateUserReq) error); ok {
		r1 = rf(ctx, users)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: ctx, ID
func (_m *UserService) Delete(ctx context.Context, ID string) error {
	ret := _m.Called(ctx, ID)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, ID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAll provides a mock function with given fields: ctx
func (_m *UserService) GetAll(ctx context.Context) ([]models.GetUserResp, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetAll")
	}

	var r0 []models.GetUserResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]models.GetUserResp, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []models.GetUserResp); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.GetUserResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByEmail provides a mock function with given fields: ctx, email
func (_m *UserService) GetByEmail(ctx context.Context, email string) (models.GetUserResp, error) {
	ret := _m.Called(ctx, email)

	if len(ret) == 0 {
		panic("no return value specified for GetByEmail")
	}

	var r0 models.GetUserResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (models.GetUserResp, error)); ok {
		return rf(ctx, email)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) models.GetUserResp); ok {
		r0 = rf(ctx, email)
	} else {
		r0 = ret.Get(0).(models.GetUserResp)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: ctx, ID
func (_m *UserService) GetByID(ctx context.Context, ID string) (models.GetUserResp, error) {
	ret := _m.Called(ctx, ID)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 models.GetUserResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (models.GetUserResp, error)); ok {
		return rf(ctx, ID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) models.GetUserResp); ok {
		r0 = rf(ctx, ID)
	} else {
		r0 = ret.Get(0).(models.GetUserResp)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, ID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserClaims provides a mock function with given fields: ctx
func (_m *UserService) GetUserClaims(ctx context.Context) map[int]string {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetUserClaims")
	}

	var r0 map[int]string
	if rf, ok := ret.Get(0).(func(context.Context) map[int]string); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[int]string)
		}
	}

	return r0
}

// Login provides a mock function with given fields: ctx, credentials
func (_m *UserService) Login(ctx context.Context, credentials models.LoginUserReq) (models.LoginUserResp, error) {
	ret := _m.Called(ctx, credentials)

	if len(ret) == 0 {
		panic("no return value specified for Login")
	}

	var r0 models.LoginUserResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.LoginUserReq) (models.LoginUserResp, error)); ok {
		return rf(ctx, credentials)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.LoginUserReq) models.LoginUserResp); ok {
		r0 = rf(ctx, credentials)
	} else {
		r0 = ret.Get(0).(models.LoginUserResp)
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.LoginUserReq) error); ok {
		r1 = rf(ctx, credentials)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, ID, user
func (_m *UserService) Update(ctx context.Context, ID string, user models.UpdateUserReq) error {
	ret := _m.Called(ctx, ID, user)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, models.UpdateUserReq) error); ok {
		r0 = rf(ctx, ID, user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewUserService creates a new instance of UserService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserService(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserService {
	mock := &UserService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
